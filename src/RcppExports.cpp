// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_window_length
int get_window_length(const Rcpp::IntegerVector& d);
RcppExport SEXP _kmer_get_window_length(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(get_window_length(d));
    return rcpp_result_gen;
END_RCPP
}
// countt_kmers_str
std::unordered_map<std::string, int> countt_kmers_str(Rcpp::StringVector& s, Rcpp::IntegerVector& d, Rcpp::StringVector& alphabet, Rcpp::LogicalVector& pos);
RcppExport SEXP _kmer_countt_kmers_str(SEXP sSEXP, SEXP dSEXP, SEXP alphabetSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(countt_kmers_str(s, d, alphabet, pos));
    return rcpp_result_gen;
END_RCPP
}
// countt_kmers_num
std::unordered_map<std::string, int> countt_kmers_num(Rcpp::NumericVector& s, Rcpp::IntegerVector& d, Rcpp::NumericVector& alphabet, Rcpp::LogicalVector& pos);
RcppExport SEXP _kmer_countt_kmers_num(SEXP sSEXP, SEXP dSEXP, SEXP alphabetSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(countt_kmers_num(s, d, alphabet, pos));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kmer_get_window_length", (DL_FUNC) &_kmer_get_window_length, 1},
    {"_kmer_countt_kmers_str", (DL_FUNC) &_kmer_countt_kmers_str, 4},
    {"_kmer_countt_kmers_num", (DL_FUNC) &_kmer_countt_kmers_num, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_kmer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
